'use client';

import React, { useState } from 'react';
import {
  Box,
  Paper,
  Typography,
  Chip,
  Grid,
  TextField,
  Button,
  Avatar,
  IconButton,
  Card,
  CardContent,
  CircularProgress,
  Divider,
} from '@mui/material';
import {
  Send as SendIcon,
  AttachFile as AttachFileIcon,
  Check as CheckIcon,
  Pause as PauseIcon,
  Close as CloseIcon,
  Chat as ChatIcon,
  SmartToy as SmartToyIcon,
  Assistant as AssistantIcon,
  History as HistoryIcon,
} from '@mui/icons-material';
import { motion } from 'framer-motion';
import { trpc } from '@web/app/trpc/client';
import { LoadingAnimation } from '@web/app/components/shared/LoadingAnimation';
import { useAuthStore } from '@web/app/store/authStore';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Message } from '@web/app/types/ticket';
import TicketAICopilot from '@web/app/components/agent/TicketAICopilot';

const statusConfig = {
  open: {
    color: '#10B981',
    label: 'Open',
  },
  in_progress: {
    color: '#F59E0B', 
    label: 'In Progress',
  },
  closed: {
    color: '#6B7280',
    label: 'Resolved',
  },
};

const statusColors = {
  open: '#22C55E',
  in_progress: '#EAB308',
  closed: '#64748B',
} as const;

type TicketStatus = keyof typeof statusColors;

// Define the TicketResponse type to match the expected API response
interface TicketResponse {
  success: boolean;
  ticket: Ticket | null;
}

const priorityColors = {
  low: '#22C55E',
  medium: '#EAB308',
  high: '#EF4444',
} as const;

type PriorityLevel = keyof typeof priorityColors;
interface Ticket {
  _id: string;
  title: string;
  content: string;
  attachment?: string;
  status: 'open' | 'in_progress' | 'closed';
  createdAt: string;
  updatedAt: string;
  customerId: string | {
    _id: string;
    name: string;
    email: string;
    image?: string;
  };
  companyId: string;
  agentId?: string | {
    _id: string;
    name: string;
    email: string;
    image?: string;
  };
  aiTicket?: {
    _id?: string;
    companyId?: string;
    __v?: number;
    createdAt?: string;
    updatedAt?: string;
    ticketId?: string;
    priority_rate: number;
    predicted_solution: string;
    predicted_solution_attachment?: string;
    summarized_content: string;
    similar_ticketids?: string[];
  } | null;
  aiSuggestions?: string[];
  messages?: Message[];
  chatId?: string;
  __v: number;
}

export default function TicketPage({ params }: { params: { id: string } }) {
  // Use React.use to unwrap the params promise as required by Next.js
  const ticketId = React.use(Promise.resolve(params.id));
  
  const [newMessage, setNewMessage] = useState('');
  const [attachment, setAttachment] = useState<File | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [aiAnalysisLoading, setAiAnalysisLoading] = useState(false);
  const { user } = useAuthStore();
  
  // Fetch ticket data using trpc directly
  const { data: ticketData, isLoading } = trpc.ticket.getTicketById.useQuery(
    { id: ticketId },
    {
      refetchOnWindowFocus: false,
      refetchInterval: 10000, // Refetch every 10 seconds to keep data fresh
    }
  );

  const ticket = ticketData?.ticket as any; // Use any for now to bypass type issues

  // AI Analysis hooks
  const analyzeTicketMutation = trpc.agent.analyzeTicket.useMutation();
  const { data: aiAnalysisData, refetch: refetchAnalysis } = trpc.agent.getTicketAnalysis.useQuery(
    { ticketId: ticketId },
    {
      enabled: !!ticket,
      retry: false,
    }
  );

  const updateTicketStatusMutation = trpc.ticket.updateTicketStatus.useMutation();
  const addMessageMutation = trpc.ticket.addMessage.useMutation();

  if (isLoading) {
    return <LoadingAnimation message="Loading ticket details..." />;
  }

  if (!ticket) {
    return (
      <Box sx={{ p: 3, textAlign: 'center' }}>
        <Typography variant="h5">Ticket not found</Typography>
      </Box>
    );
  }

  const handleStatusChange = async (newStatus: TicketStatus) => {
    try {
      // Mock status change
      console.log(`Status changed to: ${newStatus}`);
      
      // In a real app we would call:
      
      await updateTicketStatusMutation.mutateAsync({
        ticketId: ticketId,
        status: newStatus,
      });
      
    } catch (error) {
      console.error('Failed to update ticket status:', error);
    }
  };

  const handleSendMessage = async () => {
    if (!newMessage.trim() && !attachment) return;
    setIsSubmitting(true);

    try {
      // Mock file upload - in a real app this would call the API
      let attachmentUrl = '';
      if (attachment) {
          const formData = new FormData();
      formData.append('file', attachment);

      const uploadResponse = await fetch('/api/upload', {
        method: 'POST',
        body: formData,
      });

      if (!uploadResponse.ok) {
        throw new Error('Failed to upload file');
      }

      const uploadResult = await uploadResponse.json();
      attachmentUrl = uploadResult.fileUrl;
      }
      
      // In a real app we would call the API:

      await addMessageMutation.mutateAsync({
        ticketId: ticketId,
        content: newMessage,
        attachment: attachmentUrl,
        isAgent: true,
      });
      
      setNewMessage('');
      setAttachment(null);
    } catch (error) {
      console.error('Failed to send message:', error);    
    } finally {
      setIsSubmitting(false);
    }
  };

  // Function to trigger AI analysis
  const handleAnalyzeTicket = async () => {
    if (!ticket?.companyId) return;
    
    setAiAnalysisLoading(true);
    try {
      const result = await analyzeTicketMutation.mutateAsync({
        ticketId: ticketId,
        companyId: ticket.companyId,
      });
      
      if (result.success) {
        // Refetch the analysis data to get the latest results
        await refetchAnalysis();
      }
    } catch (error) {
      console.error('Failed to analyze ticket:', error);
    } finally {
      setAiAnalysisLoading(false);
    }
  };
  
  const getPriorityLevel = (rate: number): PriorityLevel => {
    // Check if priority rate is in 1-5 scale (from API) or 0-1 scale (from UI)
    const normalizedRate = rate > 1 ? rate / 5 : rate;
    
    if (normalizedRate < 0.4) return 'low';
    if (normalizedRate >= 0.7) return 'high';
    return 'medium';
  };
  
  // Helper function to get customer data safely
  const getCustomer = (ticket: any) => {
    return typeof ticket.customerId === 'object' ? ticket.customerId : null;
  };

  // Helper function to get agent data safely
  const getAgent = (ticket: any) => {
    return typeof ticket.agentId === 'object' ? ticket.agentId : null;
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
    >      <Box sx={{ maxWidth: 1400, mx: 'auto' }}>
        <Grid container spacing={3}>
          {/* Ticket Header */}
          <Grid size={{xs: 12}}>
            <Paper sx={{ p: 3, mb: 3 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h5" sx={{ fontWeight: 600 }}>
                  #{ticket._id.substring(0, 6)} - {ticket.title}
                </Typography>
                <Box sx={{ display: 'flex', gap: 1 }}>
                  {ticket.aiTicket && (
                    <Chip
                      label={`Priority: ${getPriorityLevel(ticket.aiTicket.priority_rate)}`}
                      sx={{
                        bgcolor: `${priorityColors[getPriorityLevel(ticket.aiTicket.priority_rate)]}15`,
                        color: priorityColors[getPriorityLevel(ticket.aiTicket.priority_rate)],
                        fontWeight: 600,
                      }}
                    />
                  )}                  <Chip
                    label={statusConfig[ticket.status as keyof typeof statusConfig].label}
                    sx={{
                      bgcolor: `${statusConfig[ticket.status as keyof typeof statusConfig].color}15`,
                      color: statusConfig[ticket.status as keyof typeof statusConfig].color,
                      fontWeight: 600,
                    }}
                  />
                </Box>
              </Box>
              
              <Box sx={{ display: 'flex', gap: 3, alignItems: 'center', mb: 2 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                  <Avatar src={getCustomer(ticket)?.image} sx={{ width: 32, height: 32 }} />
                  <Typography variant="body2">
                    Customer: {getCustomer(ticket)?.name || 'Unknown'}
                  </Typography>
                </Box>
                <Typography variant="body2" color="text.secondary">
                  Created: {new Date(ticket.createdAt).toLocaleString()}
                </Typography>
              </Box>
            </Paper>
          </Grid>          {/* Left Column: Customer Conversation */}
          <Grid size={{xs: 12, lg: 6}}>
            <Paper sx={{ p: 3, height: 'fit-content' }}>
              <Typography variant="h6" sx={{ mb: 3, display: 'flex', alignItems: 'center', gap: 1 }}>
                <ChatIcon />
                Customer Conversation
              </Typography>
              
              {/* Conversation Area */}
              <Box sx={{ 
                maxHeight: '500px', 
                overflowY: 'auto', 
                mb: 3,
                border: '1px solid',
                borderColor: 'divider',
                borderRadius: 2,
                p: 2
              }}>
                {/* Initial ticket content */}
                <Box sx={{ mb: 3 }}>
                  <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
                    <Avatar
                      src={getCustomer(ticket)?.image}
                      sx={{ width: 40, height: 40 }}
                    />
                    <Paper
                      sx={{
                        p: 2,
                        maxWidth: '70%',
                        bgcolor: 'grey.100',
                      }}
                    >
                      <Typography variant="body2">{ticket.content}</Typography>
                      {ticket.attachment && (
                        <Button
                          variant="text"
                          size="small"
                          startIcon={<AttachFileIcon />}
                          href={ticket.attachment}
                          target="_blank"
                          sx={{ mt: 1 }}
                        >
                          View Attachment
                        </Button>
                      )}
                      <Typography variant="caption" sx={{ display: 'block', opacity: 0.7, mt: 1 }}>
                        {new Date(ticket.createdAt).toLocaleString()}
                      </Typography>
                    </Paper>
                  </Box>
                </Box>

                {/* Message history */}
                {ticket.messages?.map((message: Message, index: number) => (
                  <Box
                    key={index}
                    sx={{
                      display: 'flex',
                      gap: 2,
                      mb: 2,
                      flexDirection: message.isAgent ? 'row-reverse' : 'row',
                    }}
                  >
                    <Avatar
                      src={message.isAgent ? getAgent(ticket)?.image : getCustomer(ticket)?.image}
                      sx={{ width: 40, height: 40 }}
                    />
                    <Paper
                      sx={{
                        p: 2,
                        maxWidth: '70%',
                        bgcolor: message.isAgent ? 'primary.light' : 'grey.100',
                        color: message.isAgent ? 'white' : 'inherit',
                      }}
                    >
                      <Typography variant="body2">{message.content}</Typography>
                      {message.attachment && (
                        <Button
                          variant="text"
                          size="small"
                          startIcon={<AttachFileIcon />}
                          href={message.attachment}
                          target="_blank"
                          sx={{ 
                            mt: 1,
                            color: message.isAgent ? 'inherit' : 'primary',
                          }}
                        >
                          View Attachment
                        </Button>
                      )}
                      <Typography variant="caption" sx={{ display: 'block', opacity: 0.7, mt: 1 }}>
                        {new Date(message.createdAt).toLocaleString()}
                      </Typography>
                    </Paper>
                  </Box>
                ))}
              </Box>

              {/* Message input */}
              <Box sx={{ display: 'flex', gap: 1, alignItems: 'flex-end' }}>
                <TextField
                  fullWidth
                  multiline
                  maxRows={4}
                  placeholder="Type your message..."
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  sx={{ '& .MuiOutlinedInput-root': { borderRadius: 2 } }}
                  disabled={isSubmitting}
                />
                <input
                  type="file"
                  id="ticket-attachment"
                  onChange={(e) => e.target.files?.[0] && setAttachment(e.target.files[0])}
                  style={{ display: 'none' }}
                  accept="image/*,.pdf,.doc,.docx"
                />
                <label htmlFor="ticket-attachment">
                  <IconButton
                    component="span"
                    disabled={isSubmitting}
                    sx={{ p: 1 }}
                  >
                    <AttachFileIcon />
                  </IconButton>
                </label>
                {attachment && (
                  <Chip
                    label={attachment.name}
                    onDelete={() => setAttachment(null)}
                    disabled={isSubmitting}
                  />
                )}
                <Button
                  variant="contained"
                  endIcon={isSubmitting ? <CircularProgress size={20} /> : <SendIcon />}
                  onClick={handleSendMessage}
                  disabled={isSubmitting || (!newMessage.trim() && !attachment)}
                  sx={{ minWidth: 100 }}
                >
                  Send
                </Button>
              </Box>
            </Paper>
          </Grid>          {/* Right Column: AI Analysis and Copilot */}
          <Grid size={{xs: 12, lg: 6}}>
            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
              
              {/* AI Ticket Analysis Section */}              <Paper sx={{ p: 3 }}>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
                  <Typography variant="h6" sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <SmartToyIcon />
                    AI Ticket Analysis
                  </Typography>
                  {/* Analysis refresh button */}
                  <Button 
                    variant="outlined" 
                    size="small" 
                    startIcon={aiAnalysisLoading ? <CircularProgress size={16} /> : <SmartToyIcon />}
                    onClick={handleAnalyzeTicket}
                    disabled={aiAnalysisLoading || !ticket?.companyId}
                  >
                    {aiAnalysisLoading ? 'Analyzing...' : (ticket.aiTicket ? 'Refresh Analysis' : 'Analyze Ticket')}
                  </Button>
                </Box>
                
                {/* Look for analysis data in ticket.aiTicket or aiAnalysisData.analysis */}
                {(ticket.aiTicket || (aiAnalysisData?.success && aiAnalysisData.analysis)) ? (
                  <Box>
                    {/* Use either the existing ticket data or the freshly loaded analysis data */}
                    {(() => {
                      const aiData = ticket.aiTicket || aiAnalysisData?.analysis;
                      if (!aiData) return null;
                      
                      // Convert priority score (1-5) to percentage (0-1)
                      const priorityRate = typeof aiData.priority_rate === 'number' ? 
                        (aiData.priority_rate > 1 ? aiData.priority_rate / 5 : aiData.priority_rate) : 0.5;
                      
                      return (
                        <>
                          {/* Priority Analysis */}
                          <Box sx={{ mb: 3 }}>
                            <Typography variant="subtitle2" sx={{ mb: 1, color: 'text.secondary' }}>
                              Priority Assessment
                            </Typography>
                            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                              <Box
                                sx={{
                                  width: 100,
                                  height: 8,
                                  bgcolor: 'grey.200',
                                  borderRadius: 4,
                                  overflow: 'hidden',
                                }}
                              >
                                <Box
                                  sx={{
                                    width: `${priorityRate * 100}%`,
                                    height: '100%',
                                    bgcolor: priorityColors[getPriorityLevel(priorityRate)],
                                  }}
                                />
                              </Box>
                              <Typography variant="body2" sx={{ fontWeight: 600 }}>
                                {(priorityRate * 100).toFixed(0)}% - {getPriorityLevel(priorityRate).toUpperCase()}
                              </Typography>
                            </Box>
                          </Box>

                          {/* Summary */}
                          <Box sx={{ mb: 3 }}>
                            <Typography variant="subtitle2" sx={{ mb: 1, color: 'text.secondary' }}>
                              Issue Summary
                            </Typography>
                            <Paper sx={{ p: 2, bgcolor: 'grey.50' }}>
                              <Typography variant="body2">
                                {aiData.summarized_content}
                              </Typography>
                            </Paper>
                          </Box>

                          {/* Predicted Solution */}
                          <Box sx={{ mb: 3 }}>
                            <Typography variant="subtitle2" sx={{ mb: 1, color: 'text.secondary' }}>
                              Predicted Solution
                            </Typography>
                            <Paper sx={{ p: 2, bgcolor: 'success.50', border: '1px solid', borderColor: 'success.200' }}>
                              <Typography variant="body2">
                                {aiData.predicted_solution}
                              </Typography>
                              {aiData.predicted_solution_attachment && (
                                <Button
                                  variant="text"
                                  size="small"
                                  startIcon={<AttachFileIcon />}
                                  href={aiData.predicted_solution_attachment}
                                  target="_blank"
                                  sx={{ mt: 1 }}
                                >
                                  View Solution Attachment
                                </Button>
                              )}
                            </Paper>
                          </Box>

                          {/* Similar Tickets */}
                          {aiData.similar_ticketids && aiData.similar_ticketids.length > 0 && (
                            <Box>
                              <Typography variant="subtitle2" sx={{ mb: 1, color: 'text.secondary', display: 'flex', alignItems: 'center', gap: 1 }}>
                                <HistoryIcon fontSize="small" />
                                Similar Tickets
                              </Typography>
                              <Box sx={{ display: 'flex', flexDirection: 'column', gap: 1 }}>
                                {aiData.similar_ticketids.slice(0, 3).map((ticketId: string, index: number) => (
                                  <Paper
                                    key={index}
                                    sx={{
                                      p: 1.5,
                                      cursor: 'pointer',
                                      bgcolor: 'primary.50',
                                      transition: 'all 0.2s',
                                      '&:hover': {
                                        bgcolor: 'primary.100',
                                      },
                                    }}
                                    onClick={() => window.open(`/agent/tickets/${ticketId}`, '_blank')}
                                  >
                                    <Typography variant="body2" sx={{ fontWeight: 500 }}>
                                      #{ticketId.substring(0, 6)}
                                    </Typography>
                                  </Paper>
                                ))}
                              </Box>
                            </Box>
                          )}
                        </>
                      );
                    })()}
                  </Box>
                ) : (
                  <Paper sx={{ p: 3, textAlign: 'center', bgcolor: 'grey.50' }}>
                    <SmartToyIcon sx={{ fontSize: 48, color: 'grey.400', mb: 1 }} />
                    <Typography variant="body2" color="text.secondary">
                      {aiAnalysisLoading ? 'AI analysis is being processed...' : 'No AI analysis available yet. Click "Analyze Ticket" to generate insights.'}
                    </Typography>
                  </Paper>
                )}
              </Paper>{/* AI Copilot Section */}
              <TicketAICopilot
                ticketId={ticketId}
                ticket={ticket}
                onStatusChange={(status: string) => handleStatusChange(status as TicketStatus)}
                onSuggestedResponse={setNewMessage}
              />
            </Box>
          </Grid>
        </Grid>
      </Box>
    </motion.div>
  );
}
